% File: RecognizeActions.m
%
% Copyright (C) Daphne Koller, Stanford Univerity, 2012

function [accuracy predicted_labels] = RecognizeActions(datasetTrain, datasetTest, G, maxIter)

% INPUTS
% datasetTrain: dataset for training models, see PA for details
% datasetTest: dataset for testing models, see PA for details
% G: graph parameterization as explained in PA decription
% maxIter: max number of iterations to run for EM

% OUTPUTS
% accuracy: recognition accuracy, defined as (#correctly classified examples / #total examples)
% predicted_labels: N x 1 vector with the predicted labels for each of the instances in datasetTest, with N being the number of unknown test instances


% Train a model for each action
% Note that all actions share the same graph parameterization and number of max iterations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% YOUR CODE HERE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%N = size(datasetTrain(1).poseData, 1);
%numParts = size(datasetTrain(1).poseData, 2);

%K = size(datasetTrain(1).InitialClassProb, 2);
%L = size(datasetTrain(1).actionData, 2);
%V = size(datasetTrain(1).InitialPairProb, 1);

%P.c = zeros(1,K);
%P.clg = repmat(struct('mu_y', [], 'sigma_y', [], 'mu_x', [], 'sigma_x', [], ...
%    'mu_angle', [], 'sigma_angle', [], 'theta', []), 1, numParts);
%P.transMatrix = [];

for i = 1:length(datasetTrain)
    [output(i).P output(i).loglikelihood output(i).ClassProb output(i).PairProb] =  ...
        EM_HMM(datasetTrain(i).actionData, datasetTrain(i).poseData, G, ...
        datasetTrain(i).InitialClassProb, datasetTrain(i).InitialPairProb, ...
        maxIter);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Classify each of the instances in datasetTrain
% Compute and return the predicted labels and accuracy
% Accuracy is defined as (#correctly classified examples / #total examples)
% Note that all actions share the same graph parameterization

accuracy = 0;
predicted_labels = [];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% YOUR CODE HERE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

for a = 1:length(datasetTest.actionData)
    N = length(datasetTest.actionData(a).marg_ind);
    numParts = size(datasetTest.actionData(a).poses{1}, 1);
    loglikelihood_vec = zeros(1, length(output));
    for b = 1:length(output)
        K = size(output(b).ClassProb, 2);
        P = output(b).P;
        logEmissionProb = zeros(N,K);
        for i = 1:N
            for k = 1:K
                for j = 1:numParts
                    poseData = datasetTest.actionData(a).poses{i};
                    y = poseData(j, 1);
                    x = poseData(j, 2);
                    angle = poseData(j, 3);
                    sigma_y = P.clg(j).sigma_y(k);
                    sigma_x = P.clg(j).sigma_x(k);
                    sigma_angle = P.clg(j).sigma_angle(k);
                    if (G(j, 1) == 0)
                        mu_y = P.clg(j).mu_y(k);
                        mu_x = P.clg(j).mu_x(k);
                        mu_angle = P.clg(j).mu_angle(k);
                    else
                        pa = G(j, 2);
                        y_pa = poseData(pa, 1);
                        x_pa = poseData(pa, 2);
                        angle_pa = poseData(pa, 3);
                        v = [1, y_pa, x_pa, angle_pa];
                        mu_y = P.clg(j).theta(k, 1:4) * v';
                        mu_x = P.clg(j).theta(k, 5:8) * v';
                        mu_angle = P.clg(j).theta(k, 9:12) * v';
                    end
                    logEmissionProb(i, k) = logEmissionProb(i, k) + ...
                        lognormpdf(y, mu_y, sigma_y) + ...
                        lognormpdf(x, mu_x, sigma_x) + ...
                        lognormpdf(angle, mu_angle, sigma_angle);
                end
            end
        end
        
        rows = datasetTest.actionData(a).marg_ind;
        numSingletons = length(rows);
        pairRows = datasetTest.actionData(a).pair_ind;
        numPairs = length(pairRows);
        numFactors = 1 + numSingletons + numPairs;
        F = repmat(struct('var', [], 'card', [], 'val', []), 1, numFactors);
      
        F(1).var = [1];
        F(1).card = length(P.c);
        F(1).val = log(P.c);
      
        for m = 1:numSingletons
            F(m + 1).var = [ m ];
            F(m + 1).card = size(logEmissionProb, 2);
            F(m + 1).val = logEmissionProb(m, :);
        end
      
        for h = 1:numPairs
            F(h + numSingletons + 1).var = [h, h + 1];
            F(h + numSingletons + 1).card = size(P.transMatrix);
            assignment = IndexToAssignment(1:prod(F(h + numSingletons + 1).card), F(h + numSingletons + 1).card);
            for s = 1:size(assignment, 1)
                F(h + numSingletons + 1).val(s) = log(P.transMatrix(assignment(s, 1), assignment(s, 2)));
            end
        end
      
        [M, PCalibrated] = ComputeExactMarginalsHMM(F);
        loglikelihood_vec(b) = loglikelihood_vec(b) + logsumexp(PCalibrated.cliqueList(1).val);
    end
    [C, maxIdx] = max(loglikelihood_vec);
    predicted_labels = [predicted_labels, maxIdx];
end

assert(length(predicted_labels) == length(datasetTest.labels), 'Lengths of two labels not the same');
counter = 0;
for d = 1:length(predicted_labels)
    if (predicted_labels(d) == datasetTest.labels(d))
        counter = counter + 1;
    end
end
        
   
accuracy = counter / length(datasetTest.labels);
    


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

end
