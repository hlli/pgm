function [P G loglikelihood] = LearnGraphAndCPDs(dataset, labels)

% dataset: N x 10 x 3, N poses represented by 10 parts in (y, x, alpha) 
% labels: N x 2 true class labels for the examples. labels(i,j)=1 if the 
%         the ith example belongs to class j
%
% Copyright (C) Daphne Koller, Stanford Univerity, 2012

N = size(dataset, 1);
K = size(labels,2);

G = zeros(10,2,K); % graph structures to learn
% initialization
for k=1:K
    G(2:end,:,k) = ones(9,2);
end

% estimate graph structure for each class
for k=1:K
    % fill in G(:,:,k)
    % use ConvertAtoG to convert a maximum spanning tree to a graph G
    %%%%%%%%%%%%%%%%%%%%%%%%%
    % YOUR CODE HERE
    %%%%%%%%%%%%%%%%%%%%%%%%%
    c = find(labels(:, k) == 1);
    [A W] = LearnGraphStructure(dataset(c, :, :));
    G(:, :, k) = ConvertAtoG(W);    
end

% estimate parameters

P.c = zeros(1,K);
% compute P.c

% the following code can be copied from LearnCPDsGivenGraph.m
% with little or no modification
%%%%%%%%%%%%%%%%%%%%%%%%%
% YOUR CODE HERE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
P.clg = repmat(struct('mu_y', [], 'sigma_y', [], 'mu_x', [], 'sigma_x', [], ...
                      'mu_angle', [], 'sigma_angle', [], 'theta', []), 1, numParts);
                  if (size(G, 3) == 1)
    G1 = zeros(size(G, 1), size(G, 2), K);
    for k = 1:K
        G1(:, :, k) = G;
    end
    G = G1;
end

for k = 1:K
    c = find(labels(:, k) == 1);
    P.c(k) = length(c) / N;
    for j = 1:numParts
        if (G(j, 1, k) == 0)
            [P.clg(j).mu_y(k), P.clg(j).sigma_y(k)] = FitGaussianParameters(dataset(c, j, 1));
            [P.clg(j).mu_x(k), P.clg(j).sigma_x(k)] = FitGaussianParameters(dataset(c, j, 2));
            [P.clg(j).mu_angle(k), P.clg(j).sigma_angle(k)] = FitGaussianParameters(dataset(c, j, 3));
        else
            par = G(j, 2, k);
            U = reshape(dataset(c, par, :), length(c), 3);
            
            [Beta1, P.clg(j).sigma_y(k)] = FitLinearGaussianParameters(dataset(c, j, 1), U);
            P.clg(j).theta(k, 2:4) = Beta1(1:3);
            P.clg(j).theta(k, 1) = Beta1(4);
            
            [Beta2, P.clg(j).sigma_x(k)] = FitLinearGaussianParameters(dataset(c, j, 2), U);
            P.clg(j).theta(k, 6:8) = Beta2(1:3);
            P.clg(j).theta(k, 5) = Beta2(4);
            
            [Beta3, P.clg(j).sigma_angle(k)] = FitLinearGaussianParameters(dataset(c, j, 3), U);
            P.clg(j).theta(k, 10:12) = Beta3(1:3);
            P.clg(j).theta(k, 9) = Beta3(4);
        end
    end
end

loglikelihood = ComputeLogLikelihood(P, G, dataset);

fprintf('log likelihood: %f\n', loglikelihood);